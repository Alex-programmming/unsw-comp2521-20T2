Input	Initial	Has	    Number	AvgTime	    AvgTime
Size	Order	Dups	of runs	forusel	    forsort
5000	random	no	    5	    0.12sec	    0.00sec
5000	sorted	no	    5	    0.050sec    0.00sec
5000	reverse	no	    5	    0.050sec    0.00sec

5000	random	yes	    5	    0.12sec	    0.00sec
5000	sorted	yes	    5	    0.05sec	    0.00sec
5000	reverse	yes	    5	    0.05sec	    0.00sec

10000	random	no	    5	    0.60sec	    0.00sec
10000	sorted	no	    5	    0.22sec	    0.00sec
10000	reverse	no	    5	    0.22sec	    0.00sec

10000	random	yes	    5	    0.58sec	    0.00sec
10000	sorted	yes	    5	    0.22sec	    0.00sec
10000	reverse	yes	    5	    0.22sec	    0.00sec

50000	random	no	    5	    35sec	    0.023sec
50000	sorted	no	    5	    5.4sec	    0.005sec
50000	reverse	no	    5	    5.5sec	    0.010sec

50000	random	yes	    5	    35sec	    0.025sec
50000	sorted	yes	    5	    5.5sec	    0.010sec
50000	reverse	yes	    5	    5.5sec	    0.010sec

100000	random	no	    5	    152sec	    0.060sec
100000	sorted	no	    5	    22sec	    0.020sed
100000	reverse	no	    5	    22sec	    0.025sed

100000	random	yes	    5	    152sec	    0.060sec
100000	sorted	yes	    5	    22sec	    0.025sec
100000	reverse	yes	    5	    22sec	    0.030sec



This table shows that the difference of time between useIntLists and sort increase with 
the size of input, which means the useIntLists has much more loops than sort so that 
more codes need to be executed when the size of input increases. The
duplicatons almost have no effect on average time, and the code of random order needs
more time than that of sorted and reverse order to execute. This is because that
the random order needs to get into a loop to insert numbers, while the sorted and 
the reverse order don't need to.












